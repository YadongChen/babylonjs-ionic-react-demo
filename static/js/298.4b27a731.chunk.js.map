{"version":3,"file":"static/js/298.4b27a731.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@stencil+core@2.22.2/node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.22.2 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","selector","content","suffix","contentPrefix","startsWith","blocks","substring","length","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","applyStrictSelectorScope","hostSelector","res","className","_scopeSelectorPart","scopedP","lastIndex","replaceBy","applySimpleSelectorScope","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","scopedPart","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCss","commentsWithHash","match","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"sourceRoot":""}